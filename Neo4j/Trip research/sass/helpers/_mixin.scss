// size, width, height
@mixin size($width: 10rem, $height: $width) {
    width: $width;
    height: $height;
}

// position
@mixin positionElement($direction: "center", $position: absolute) {
    position: $position;
    @if $direction == "center" {
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
    @if $direction == "row-center" {
        top: 50%;
        transform: translateY(-50%);
    }
    @if $direction == "col-center" {
        left: 50%;
        transform: translateX(-50%);
    }
}

// flexbox
@mixin flexBox(
    $display: flex,
    $align-items: stretch,
    $justify-content: flex-start,
    $direction: row,
    $wrap: nowrap,
    $align-content: normal
) {
    display: $display;
    flex-direction: $direction;
    flex-wrap: $wrap;
    justify-content: $justify-content;
    align-items: $align-items;
    align-content: $align-content;
}

// hide scroll
@mixin hideScroll() {
    -ms-overflow-style: none;
    scrollbar-width: none;
    &::-webkit-scrollbar {
        display: none;
    }
}

// text clamp
@mixin textClamp($rows: 1, $size: 100%) {
    display: -webkit-box;
    -webkit-line-clamp: $rows;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    width: $size;
    max-width: $size;
    // white-space: nowrap;
    word-break: break-word;
}

// touch slider
@mixin touchSlider($width: 80%, $gap: 2.5rem, $padding: 1rem) {
    display: grid !important;
    justify-content: flex-start !important;
    grid-auto-columns: $width;
    grid-auto-flow: column;
    grid-template-columns: unset;
    grid-column-gap: $gap;
    overflow-x: auto;
    padding: $padding;
    scroll-snap-type: x mandatory;
    scroll-snap-stop: always;
    @include hideScroll();
    & > * {
        scroll-snap-align: start;
        width: auto;
    }
}

// custom scroll
@mixin customScroll(
    $widthBar: 0.5rem,
    $thumbColor: $primary-color,
    $thumbRound: 2rem,
    $bgColorTrack: rgba($border-color, 0.8)
) {
    &::-webkit-scrollbar {
        width: $widthBar;
    }

    &::-webkit-scrollbar-track {
        background-color: $bgColorTrack;
    }

    &::-webkit-scrollbar-thumb {
        background-color: $thumbColor;
        border-radius: $thumbRound;
    }
}

@mixin letterSpace($space) {
    letter-spacing: $space;
    text-indent: -$space;
}

@mixin customRadio($size, $bgColor: white, $borderWidth: 1px, $borderColor: black, $checkColor: red, $checkSize: 1rem) {
    @include size($size);
    appearance: none;
    cursor: pointer;
    position: relative;
    background-color: $bgColor;
    border: $borderWidth solid $borderColor;
    border-radius: 50%;
    overflow: hidden;
    &:checked::after {
        display: inline-block;
        content: "";
        @include size($checkSize);
        background-color: $checkColor;
        border-radius: 50%;
        @include positionElement("center", absolute);
        box-shadow: 0 0 0rem 0rem rgba($checkColor, 0.5);
        visibility: visible;
        transition: all 0.1s ease;
    }
    &:not(:checked)::after {
        display: inline-block;
        content: "";
        @include size($checkSize);
        background-color: $checkColor;
        border-radius: 50%;
        @include positionElement("center", absolute);
        box-shadow: 0 0 0.1rem 0.5rem rgba($checkColor, 0.5);
        visibility: hidden;
        transition: all 0.1s ease;
    }
}

@mixin boxShadowAdmin() {
    box-shadow: 0px 8px 24px rgba(149, 157, 165, 0.2);
    border: 1px solid rgba($border-dotted-color, 0.2);
}

// responsive
@mixin maxWidth($breakpoint) {
    @media screen and (max-width: $breakpoint) {
        @content;
    }
}

@mixin minWidth($breakpoint) {
    @media only screen and (min-width: $breakpoint) {
        @content;
    }
}

@mixin bothWidth($breakpoint-start, $breakpoint-end) {
    @media only screen and (min-width: $breakpoint-start) and (max-width: $breakpoint-end) {
        @content;
    }
}
